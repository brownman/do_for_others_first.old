shopt -s expand_aliases

where_am_i () 
{ 
    local file=${1:-"${BASH_SOURCE[1]}"};
    local rpath=$(readlink -m $file);
    local rcommand=${rpath##*/};
    local str_res=${rpath%/*};
    local dir_self="$( cd $str_res  && pwd )";
    echo "$dir_self"
}

        export -f where_am_i

    test(){
        ########################## Test Requirements: 
        print_func
        local result=0
        ########################## install dependencies 
        list=`pull depend`
        for item in $list;do
            cmd="dpkg -S $item"
            eval "$cmd" 1>/dev/null && { echo "[V] package exist: $item"; } || { echo >&2 "[X] sudo apt-get install $item" ;result=1; }
        done
        ########################### test if gmail-notify is running: 
        #        cmd=`pull check`
        #       str=`eval "$cmd"`
        #       [ -n "$str" ] && { echo "[V] gmail-notify is running"; } || { echo >&2 "[X] please run gmail-notify" ;result=1; } 

        ########################### test if the user update the default configurations 
        [ -n "$user" ] && { echo "[V] user is set: $user"; } || { echo >&2 "[X] please update your gmail settings which located in this file" ;result=1; }
        return $result
    }

    steps(){
        clear
        info_bug_report
        compare_version
        info_title
        ensure_user
        installing_symlink    
        str_res=$( eval test )
        res=$?
        if [ $res -eq 0 ];then
#            info_conf
            installing_hotkey
            echo compose
        else
            echo
            print_color 32 "[INSTRUCTIONS]"
            notify-send "Error" "do_for_others_first"
            cat /tmp/err | pv -qL 10
        fi
    }
    ################################### env ################################\

#        str_first="$@"


    #    dir_self=`pwd`
    dir_self=`where_am_i $BASH_SOURCE`
    filename=`basename $BASH_SOURCE`
    file_self=$dir_self/$filename



       [ ! -f $dir_self/env.cfg ] && { cp $dir_self/.env.example.cfg $dir_self/env.cfg;  }
    source $dir_self/env.cfg

    #echo "[language I want to learn]"
    #cat -n $dir_self/languages.txt
    #echo
    ####################################catch the fucken bug#######################/
    [ -f /tmp/err ] && { /bin/rm /tmp/err; }
    [ -f /tmp/env ] && { /bin/rm /tmp/env; }
    env> /tmp/env
    #exec 2>/tmp/err
   # source 1>/tmp/out $dir_self/CFG/list.cfg
    #trap trap_err ERR
    set -o nounset
    ########################################################################/

    #    echo
    steps
    #echo    print_color 35 "[fortune]"
    # echo   (    cowsay "$( fortune )" )
    echo
    echo
    echo The End
    set +u
    set +e


    every 4 'echo hi' 'echo bye'
    idea(){
        toilet1 great
    echo enter your idea
    read answer
    echo "$answer" >> $file_idea

    }

    
#export dir_root=$dir_self
source $dir_self/struct.cfg
#bash -c $dir_self/next.sh




