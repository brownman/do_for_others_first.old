trace(){
echo "$@" >> /tmp/trace
}
random () 
{ 
    set +e;
    local num=${1:-5};
    let "r = $RANDOM % $num";
    return $r
}
every () 
{ 
    local num=${1:-5};
    local cmd_do="$2";
    local cmd_else="${3:-}";
    local res=0;
    if [ -z "$cmd_else" ]; then
        cmd_else="trace skip \"$cmd_do\"";
    fi;
    if [ $num -eq 0 ]; then
        res=0;
    else
        random $num;
        res=$?;
    fi;
    if [ $res -eq 0 ]; then
        notify-send "life is random! :)" "boom/$num";
        eval "$cmd_do";
    else
        notify-send "$res/$num";
        eval "$cmd_else";
    fi
}



where_am_i () 
{ 
    local file=${1:-"${BASH_SOURCE[1]}"};
    local rpath=$(readlink -m $file);
    local rcommand=${rpath##*/};
    local str_res=${rpath%/*};
    local dir_self="$( cd $str_res  && pwd )";
    echo "$dir_self"
}

compare_version(){
    echo $FUNCNAME 
    version_id_master=$( curl https://raw.githubusercontent.com/brownman/do_for_others_first/develop/.version 2>/tmp/err 1>/tmp/version && cat /tmp/version)
    version_id_local=$(pull version_id | tee $dir_self/.version)
    change_log_local=$( cat $file_self | grep "++" | grep -v 'grep' | sed 's/++//g' | tee $dir_self/.changelog)


    local regular_expression1='^[0-9]+$'
    if  [[ $version_id_master =~ $regular_expression1 ]] && [[ $version_id_local =~ $regular_expression1  ]] ; then

        if [ "$version_id_master" -gt "$version_id_local" ];then
            print_color 31 "[A new Version now Available!]"

            change_log_master=$( curl https://raw.githubusercontent.com/brownman/do_for_others_first/master/.changelog 2>/dev/null 1>/tmp/changelog && cat /tmp/changelog)
            echo "$change_log_master"

        else
            print_color 32 "[running the latest version]"
        fi

    else
        echo "[remote version] $version_id_master"
        echo "[local version] $version_id_local"
    fi
}
ensure_user(){
    [ "$(id -u)" = 0 ] && { print_color 31 "[You Are Root!]..\tplease run as user";exit 0; } || { print_color 32  "[Running As User]\t$LOGNAME"; }
}
trap_err(){
    local str_caller=`caller`
    print_func
    local cmd=$( gxmessage -entrytext "gvim +${str_caller}" -file /tmp/err -title 'trap_err' )
    echo "[cmd] $cmd"
    eval "$cmd"
}

function detect_xfce()
{
    #ref: https://github.com/alexeevdv/dename/blob/master/dename.sh
    ps -e | grep -E '^.* xfce4-session$' > /dev/null
    if [ $? -ne 0 ];
    then
        return 1
    fi
    VERSION=`xfce4-session --version | grep xfce4-session | awk '{print $2}'`
    DESKTOP="XFCE"
    return 0
}

################################### helpers ############################\
    print_color_n()       { echo -en "\x1B[01;$1m[*]\x1B[0m $2 "; }
    print_color()       { echo -e "\x1B[01;$1m[*]\x1B[0m $2 "; }
    remove_trailing(){
        local res=$(echo "$1" | sed -e 's/^ *//g' -e 's/ *$//g')
        echo "$res"
    }

